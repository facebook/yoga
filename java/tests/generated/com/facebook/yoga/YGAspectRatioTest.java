/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @generated SignedSource<<37a01c67158df025b1b43b8378071746>>
 * generated by gentest/gentest-driver.ts from gentest/fixtures/YGAspectRatioTest.html
 */

package com.facebook.yoga;

import static org.junit.Assert.assertEquals;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import com.facebook.yoga.utils.TestUtils;

@RunWith(Parameterized.class)
public class YGAspectRatioTest {
  @Parameterized.Parameters(name = "{0}")
  public static Iterable<TestParametrization.NodeFactory> nodeFactories() {
    return TestParametrization.nodeFactories();
  }

  @Parameterized.Parameter public TestParametrization.NodeFactory mNodeFactory;

  @Test
  @Ignore
  public void test_aspect_ratio_does_not_stretch_cross_axis_dim() {
    YogaConfig config = YogaConfigFactory.create();

    final YogaNode root = createNode(config);
    root.setPositionType(YogaPositionType.ABSOLUTE);
    root.setWidth(300f);
    root.setHeight(300f);

    final YogaNode root_child0 = createNode(config);
    root_child0.setOverflow(YogaOverflow.SCROLL);
    root_child0.setFlexGrow(1f);
    root_child0.setFlexShrink(1f);
    root_child0.setFlexBasisPercent(0f);
    root.addChildAt(root_child0, 0);

    final YogaNode root_child0_child0 = createNode(config);
    root_child0_child0.setFlexDirection(YogaFlexDirection.ROW);
    root_child0.addChildAt(root_child0_child0, 0);

    final YogaNode root_child0_child0_child0 = createNode(config);
    root_child0_child0_child0.setFlexGrow(2f);
    root_child0_child0_child0.setFlexShrink(1f);
    root_child0_child0_child0.setFlexBasisPercent(0f);
    root_child0_child0_child0.setAspectRatio(1 / 1f);
    root_child0_child0.addChildAt(root_child0_child0_child0, 0);

    final YogaNode root_child0_child0_child1 = createNode(config);
    root_child0_child0_child1.setWidth(5f);
    root_child0_child0.addChildAt(root_child0_child0_child1, 1);

    final YogaNode root_child0_child0_child2 = createNode(config);
    root_child0_child0_child2.setFlexGrow(1f);
    root_child0_child0_child2.setFlexShrink(1f);
    root_child0_child0_child2.setFlexBasisPercent(0f);
    root_child0_child0.addChildAt(root_child0_child0_child2, 2);

    final YogaNode root_child0_child0_child2_child0 = createNode(config);
    root_child0_child0_child2_child0.setFlexGrow(1f);
    root_child0_child0_child2_child0.setFlexShrink(1f);
    root_child0_child0_child2_child0.setFlexBasisPercent(0f);
    root_child0_child0_child2_child0.setAspectRatio(1 / 1f);
    root_child0_child0_child2.addChildAt(root_child0_child0_child2_child0, 0);

    final YogaNode root_child0_child0_child2_child0_child0 = createNode(config);
    root_child0_child0_child2_child0_child0.setWidth(5f);
    root_child0_child0_child2_child0.addChildAt(root_child0_child0_child2_child0_child0, 0);

    final YogaNode root_child0_child0_child2_child0_child1 = createNode(config);
    root_child0_child0_child2_child0_child1.setFlexGrow(1f);
    root_child0_child0_child2_child0_child1.setFlexShrink(1f);
    root_child0_child0_child2_child0_child1.setFlexBasisPercent(0f);
    root_child0_child0_child2_child0_child1.setAspectRatio(1 / 1f);
    root_child0_child0_child2_child0.addChildAt(root_child0_child0_child2_child0_child1, 1);
    root.setDirection(YogaDirection.LTR);
    root.calculateLayout(YogaConstants.UNDEFINED, YogaConstants.UNDEFINED);

    assertEquals(0f, root.getLayoutX(), 0.0f);
    assertEquals(0f, root.getLayoutY(), 0.0f);
    assertEquals(300f, root.getLayoutWidth(), 0.0f);
    assertEquals(300f, root.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0.getLayoutY(), 0.0f);
    assertEquals(300f, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(300f, root_child0.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0.getLayoutY(), 0.0f);
    assertEquals(300f, root_child0_child0.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child0.getLayoutY(), 0.0f);
    assertEquals(197f, root_child0_child0_child0.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child0.getLayoutHeight(), 0.0f);

    assertEquals(197f, root_child0_child0_child1.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child1.getLayoutY(), 0.0f);
    assertEquals(5f, root_child0_child0_child1.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child1.getLayoutHeight(), 0.0f);

    assertEquals(202f, root_child0_child0_child2.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2.getLayoutY(), 0.0f);
    assertEquals(98f, root_child0_child0_child2.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child2.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child2_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0.getLayoutY(), 0.0f);
    assertEquals(98f, root_child0_child0_child2_child0.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child2_child0.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child2_child0_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0_child0.getLayoutY(), 0.0f);
    assertEquals(5f, root_child0_child0_child2_child0_child0.getLayoutWidth(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0_child0.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child2_child0_child1.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0_child1.getLayoutY(), 0.0f);
    assertEquals(98f, root_child0_child0_child2_child0_child1.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child2_child0_child1.getLayoutHeight(), 0.0f);

    root.setDirection(YogaDirection.RTL);
    root.calculateLayout(YogaConstants.UNDEFINED, YogaConstants.UNDEFINED);

    assertEquals(0f, root.getLayoutX(), 0.0f);
    assertEquals(0f, root.getLayoutY(), 0.0f);
    assertEquals(300f, root.getLayoutWidth(), 0.0f);
    assertEquals(300f, root.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0.getLayoutY(), 0.0f);
    assertEquals(300f, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(300f, root_child0.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0.getLayoutY(), 0.0f);
    assertEquals(300f, root_child0_child0.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0.getLayoutHeight(), 0.0f);

    assertEquals(103f, root_child0_child0_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child0.getLayoutY(), 0.0f);
    assertEquals(197f, root_child0_child0_child0.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child0.getLayoutHeight(), 0.0f);

    assertEquals(98f, root_child0_child0_child1.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child1.getLayoutY(), 0.0f);
    assertEquals(5f, root_child0_child0_child1.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child1.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child2.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2.getLayoutY(), 0.0f);
    assertEquals(98f, root_child0_child0_child2.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child2.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child2_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0.getLayoutY(), 0.0f);
    assertEquals(98f, root_child0_child0_child2_child0.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child2_child0.getLayoutHeight(), 0.0f);

    assertEquals(93f, root_child0_child0_child2_child0_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0_child0.getLayoutY(), 0.0f);
    assertEquals(5f, root_child0_child0_child2_child0_child0.getLayoutWidth(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0_child0.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0_child0_child2_child0_child1.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0_child0_child2_child0_child1.getLayoutY(), 0.0f);
    assertEquals(98f, root_child0_child0_child2_child0_child1.getLayoutWidth(), 0.0f);
    assertEquals(197f, root_child0_child0_child2_child0_child1.getLayoutHeight(), 0.0f);
  }

  @Test
  public void test_zero_aspect_ratio_behaves_like_auto() {
    YogaConfig config = YogaConfigFactory.create();

    final YogaNode root = createNode(config);
    root.setPositionType(YogaPositionType.ABSOLUTE);
    root.setWidth(300f);
    root.setHeight(300f);

    final YogaNode root_child0 = createNode(config);
    root_child0.setWidth(50f);
    root_child0.setAspectRatio(0 / 1f);
    root.addChildAt(root_child0, 0);
    root.setDirection(YogaDirection.LTR);
    root.calculateLayout(YogaConstants.UNDEFINED, YogaConstants.UNDEFINED);

    assertEquals(0f, root.getLayoutX(), 0.0f);
    assertEquals(0f, root.getLayoutY(), 0.0f);
    assertEquals(300f, root.getLayoutWidth(), 0.0f);
    assertEquals(300f, root.getLayoutHeight(), 0.0f);

    assertEquals(0f, root_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0.getLayoutY(), 0.0f);
    assertEquals(50f, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(0f, root_child0.getLayoutHeight(), 0.0f);

    root.setDirection(YogaDirection.RTL);
    root.calculateLayout(YogaConstants.UNDEFINED, YogaConstants.UNDEFINED);

    assertEquals(0f, root.getLayoutX(), 0.0f);
    assertEquals(0f, root.getLayoutY(), 0.0f);
    assertEquals(300f, root.getLayoutWidth(), 0.0f);
    assertEquals(300f, root.getLayoutHeight(), 0.0f);

    assertEquals(250f, root_child0.getLayoutX(), 0.0f);
    assertEquals(0f, root_child0.getLayoutY(), 0.0f);
    assertEquals(50f, root_child0.getLayoutWidth(), 0.0f);
    assertEquals(0f, root_child0.getLayoutHeight(), 0.0f);
  }

  private YogaNode createNode(YogaConfig config) {
    return mNodeFactory.create(config);
  }
}
